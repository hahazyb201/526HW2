#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,    help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:

    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, coverage_vector")
    blank_coverage_vector = tuple([False] * len(f))
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, blank_coverage_vector)
    stacks = [{} for _ in f] + [{}]
    stacks[0][hypothesis.coverage_vector] = initial_hypothesis
    
    for i, stack in enumerate(stacks[:-1]):
        for h in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune

            for k in xrange(len(f)):
                if h.coverage_vector[k]:
                    continue # this word is already covered, cannot form new phrase starting here
                for j in xrange(1, len(f) - k + 1):
                    if (sum(h.coverage_vector[k:k+j]) > 0): 
                        # includes words already covered, cannot form new phrase
                        break
                    if f[k:k+j] in tm:
                        for phrase in tm[f[k:k+j]]:
                            logprob = h.logprob + phrase.logprob
                            lm_state = h.lm_state
                            for word in phrase.english.split():
                                (lm_state, word_logprob) = lm.score(lm_state, word)
                                logprob += word_logprob
                            logprob += lm.end(lm_state) if i+j == len(f) else 0.0
                            new_coverage_vector = list(h.coverage_vector[:])
                            new_coverage_vector[k:k+j] = [True] * j
                            new_coverage_vector = tuple(new_coverage_vector)
                            new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_coverage_vector)
                            
                            stack_to_add = i + j

                            if new_coverage_vector not in stacks[stack_to_add] or stacks[stack_to_add][new_coverage_vector].logprob < logprob:
                                # second case is recombination  

                                new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_coverage_vector)
                                stacks[stack_to_add][new_coverage_vector] = new_hypothesis

    winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
    def extract_english(h): 
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)
    print extract_english(winner)

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
                (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
